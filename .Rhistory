ggplot(aes(x = date, y = rate, color = state)) +
geom_line(aes(group = state)) + # creates smooth lines
facet_grid(type ~ region, scales = 'free_y') + # stack/scale axis
labs(x = 'Time (Calendar Time)',
y = 'Rates (per 100000)',
title = paste('Wave 1: Rates of Excess deaths, & total deaths in U.S. for Region', i),
color = 'State') +
theme(axis.text.x = element_text(vjust = 0.75, size = 6, angle = 45),
legend.key.size = unit(0.25, 'cm'))
print(plot3)
}
dat2 |>
select(date, population,
covid_deaths, excess_deaths, total_deaths, region,
region_name, state) |>
pivot_longer(c(excess_deaths, total_deaths), # create col of type of rate, for facet wrapping
names_to = 'type',
values_to = 'values') |>
mutate(rate = (values / population) * 100000,
region = as.factor(region)) |>
#wave 1: April 2020 - June 2020
filter(date >= make_date(2020, 3, 15) & date <= make_date(2020, 6, 1)) |>
ggplot(aes(x = date, y = rate, color = state)) +
geom_line(aes(group = state)) + # creates smooth lines
facet_grid(type ~ region, scales = 'free_y') + # stack/scale axis
labs(x = 'Time (Calendar Time)',
y = 'Rates (per 100000)',
title = 'Wave 1: Rates of Excess Deaths, & Total Deaths in U.S. for Region',
color = 'Region') +
theme(axis.text.x = element_text(vjust = 0.75, size = 6, angle = 45),
legend.key.size = unit(0.25, 'cm'))
dat2 |>
select(date, population,
covid_deaths, excess_deaths, total_deaths, region,
region_name, state) |>
pivot_longer(c(excess_deaths, total_deaths), # create col of type of rate, for facet wrapping
names_to = 'type',
values_to = 'values') |>
mutate(rate = (values / population) * 100000,
region = as.factor(region)) |>
#Wave 2: October 2020 - March 2021
filter(date >= make_date(2020, 9, 1) & date <= make_date(2021, 4, 1)) |>
ggplot(aes(x = date, y = rate, color = state)) +
geom_line(aes(group = state)) + # creates smooth lines
facet_grid(type ~ region, scales = 'free_y') + # stack/scale axis
labs(x = 'Time (Calendar Time)',
y = 'Rates (per 100000)',
title = 'Wave 2: Rates of Excess Deaths, & Total Deaths in U.S. for Region',
color = 'Region') +
theme(axis.text.x = element_text(vjust = 0.75, size = 6, angle = 45),
legend.key.size = unit(0.25, 'cm'))
for (i in sort(unique(dat2$region_name))) {
plot2 <- dat2 |>
select(date, population,
covid_deaths, excess_deaths, total_deaths, region,
region_name, state) |>
pivot_longer(c(excess_deaths, total_deaths), # create col of type of rate, for facet wrapping
names_to = 'type',
values_to = 'values') |>
mutate(rate = (values / population) * 100000,
region = as.factor(region)) |>
filter(region_name %in% i) |>
#wave 2: October 2020 - March 2021
filter(date >= make_date(2020, 9, 1) & date <= make_date(2021, 4, 1)) |>
ggplot(aes(x = date, y = rate, color = state)) +
geom_line(aes(group = state)) + # creates smooth lines
facet_grid(type ~ region, scales = 'free_y') + # stack/scale axis
labs(x = 'Time (Calendar Time)',
y = 'Rates (per 100000)',
title = paste('Wave 1: Rates of Excess deaths, & total deaths in U.S. for Region', i),
color = 'State') +
theme(axis.text.x = element_text(vjust = 0.75, size = 6, angle = 45),
legend.key.size = unit(0.25, 'cm'))
print(plot2)
}
dat2 |>
select(date, population,
covid_deaths, excess_deaths, total_deaths, region,
region_name, state) |>
pivot_longer(c(excess_deaths, total_deaths), # create col of type of rate, for facet wrapping
names_to = 'type',
values_to = 'values') |>
mutate(rate = (values / population) * 100000,
region = as.factor(region)) |>
#Wave 3: August 2021 - November 2021
filter(date >= make_date(2021, 8, 1) & date <= make_date(2021, 12, 31)) |>
ggplot(aes(x = date, y = rate, color = state)) +
geom_line(aes(group = state)) + # creates smooth lines
facet_grid(type ~ region, scales = 'free_y') + # stack/scale axis
labs(x = 'Time (Calendar Time)',
y = 'Rates (per 100000)',
title = 'Wave 3: Rates of Excess Deaths, & Total Deaths in U.S. for Region',
color = 'Region') +
theme(axis.text.x = element_text(vjust = 0.75, size = 6, angle = 45),
legend.key.size = unit(0.25, 'cm'))
for (i in sort(unique(dat2$region_name))) {
plot3 <- dat2 |>
select(date, population,
covid_deaths, excess_deaths, total_deaths, region,
region_name, state) |>
pivot_longer(c(excess_deaths, total_deaths), # create col of type of rate, for facet wrapping
names_to = 'type',
values_to = 'values') |>
mutate(rate = (values / population) * 100000,
region = as.factor(region)) |>
filter(region_name %in% i) |>
#Wave 3: August 2021 - November 2021
filter(date >= make_date(2021, 8, 1) & date <= make_date(2021, 12, 31)) |>
ggplot(aes(x = date, y = rate, color = state)) +
geom_line(aes(group = state)) + # creates smooth lines
facet_grid(type ~ region, scales = 'free_y') + # stack/scale axis
labs(x = 'Time (Calendar Time)',
y = 'Rates (per 100000)',
title = paste('Wave 1: Rates of Excess deaths, & total deaths in U.S. for Region', i),
color = 'State') +
theme(axis.text.x = element_text(vjust = 0.75, size = 6, angle = 45),
legend.key.size = unit(0.25, 'cm'))
print(plot3)
}
dat2 |>
select(date, population,
covid_deaths, excess_deaths, total_deaths, region,
region_name, state) |>
pivot_longer(c(excess_deaths, total_deaths), # create col of type of rate, for facet wrapping
names_to = 'type',
values_to = 'values') |>
mutate(rate = (values / population) * 100000,
region = as.factor(region)) |>
#Wave 4: January 2022 - March 2022
filter(date >= make_date(2021, 12, 1) & date <= make_date(2022, 3, 31)) |>
ggplot(aes(x = date, y = rate, color = state)) +
geom_line(aes(group = state)) + # creates smooth lines
facet_grid(type ~ region, scales = 'free_y') + # stack/scale axis
labs(x = 'Time (Calendar Time)',
y = 'Rates (per 100000)',
title = 'Wave 4: Rates of Excess Deaths, & Total Deaths in U.S. for Region',
color = 'Region') +
theme(axis.text.x = element_text(vjust = 0.75, size = 6, angle = 45),
legend.key.size = unit(0.25, 'cm'))
for (i in sort(unique(dat2$region_name))) {
plot3 <- dat2 |>
select(date, population,
covid_deaths, excess_deaths, total_deaths, region,
region_name, state) |>
pivot_longer(c(excess_deaths, total_deaths), # create col of type of rate, for facet wrapping
names_to = 'type',
values_to = 'values') |>
mutate(rate = (values / population) * 100000,
region = as.factor(region)) |>
filter(region_name %in% i) |>
#Wave 4: January 2022 - March 2022
filter(date >= make_date(2021, 12, 1) & date <= make_date(2022, 3, 31)) |>
ggplot(aes(x = date, y = rate, color = state)) +
geom_line(aes(group = state)) + # creates smooth lines
facet_grid(type ~ region, scales = 'free_y') + # stack/scale axis
labs(x = 'Time (Calendar Time)',
y = 'Rates (per 100000)',
title = paste('Wave 1: Rates of Excess deaths, & total deaths in U.S. for Region', i),
color = 'State') +
theme(axis.text.x = element_text(vjust = 0.75, size = 6, angle = 45),
legend.key.size = unit(0.25, 'cm'))
print(plot3)
}
for (i in sort(unique(dat2$region_name))) {
plot3 <- dat2 |>
select(date, population,
covid_deaths, excess_deaths, total_deaths, region,
region_name, state) |>
pivot_longer(c(excess_deaths, total_deaths), # create col of type of rate, for facet wrapping
names_to = 'type',
values_to = 'values') |>
mutate(rate = (values / population) * 100000,
region = as.factor(region)) |>
filter(region_name %in% i) |>
#Wave 4: January 2022 - March 2022
filter(date >= make_date(2021, 12, 1) & date <= make_date(2022, 3, 31)) |>
ggplot(aes(x = date, y = rate, color = state)) +
geom_line(aes(group = state)) + # creates smooth lines
facet_grid(type ~ region, scales = 'free_y') + # stack/scale axis
labs(x = 'Time (Calendar Time)',
y = 'Rates (per 100000)',
title = paste('Wave 1: Rates of Excess deaths, & total deaths in U.S. for Region', i),
color = 'State') +
theme(axis.text.x = element_text(vjust = 0.75, size = 6, angle = 45),
legend.key.size = unit(0.25, 'cm'))
print(plot3)
}
library(dplyr)
library(tidyverse)
library(lubridate)
library(ggrepel)
dat <- readRDS('../data/dat.rds')
pre_covid <- readRDS('../data/pre-covid.rds')
dat <- readRDS('../data/dat.rds')
pre_covid <- readRDS('../data/dat_preCovid.rds')
#write.csv(pre_covid, "pre_covid.csv", row.names = FALSE)
head(pre_covid)
unique(pre_covid$mmwr_year)
View(dat)
fit <- pre_covid |> lm(total_deaths ~ as.factor(state) + as.factor(mmwr_week) + as.factor(region), data = _)
summary(fit)
predicted_deaths <- predict(fit, newdata = dat, se.fit = TRUE)
dat2 <- dat |>
mutate(
expected_deaths = predicted_deaths$fit,
expected_deaths_se = predicted_deaths$se.fit,
excess_deaths = total_deaths - expected_deaths,
)
View(dat2)
# Reshape data for plotting
overlay_data <- dat2 |>
filter(state %in% c("NJ")) |>
#wave 1: April 2020 - June 2020
#filter(date >= make_date(2020, 9, 1) & date <= make_date(2021, 4, 1)) |>
select(state, mmwr_year, mmwr_week, total_deaths, covid_deaths, excess_deaths) |>
pivot_longer(
cols = c(covid_deaths, excess_deaths),
names_to = "type",
values_to = "deaths"
)
#can focus on comparing states in region 2 vs region 10,
library(ggplot2)
ggplot(overlay_data, aes(x = mmwr_week, y = deaths, color = type, group = type)) +
geom_line() +
facet_wrap(~mmwr_year, scales = "free_y") +
labs(
title = "Total Deaths vs Excess Deaths by Week and State",
x = "MMWR Week",
y = "Number of Deaths",
color = "Type"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
setwd("/Users/joeylin/Desktop/BST260_Proj/BST-260-Project")
library(httr2)
library(tidyverse)
library(janitor)
library(jsonlite)
library(purrr)
library(lubridate)
library(tibble)
# reading in csv
# if running code in code directory, make sure to add ..
# if running in home directory, just start with data/
population <- read.csv("raw-data/NST-EST2023-ALLDATA.csv")
library(httr2)
library(tidyverse)
library(janitor)
library(jsonlite)
library(purrr)
library(lubridate)
library(tibble)
# reading in csv
# if running code in code directory, make sure to add ..
# if running in home directory, just start with data/
population <- read.csv("~/BST260_Proj/BST-260-Project/raw-data/NST-EST2023-ALLDATA.csv")
setwd("/Users/joeylin/Desktop/BST260/BST-260-Project")
library(httr2)
library(tidyverse)
library(janitor)
library(jsonlite)
library(purrr)
library(lubridate)
library(tibble)
# reading in csv
# if running code in code directory, make sure to add ..
# if running in home directory, just start with data/
population <- read.csv('raw-data/NST-EST2023-ALLDATA.csv')
# data wrangling population dataframe
population <- population |>
filter(STATE != 0) |>
select(c(NAME, POPESTIMATE2020,
POPESTIMATE2021, POPESTIMATE2022, POPESTIMATE2023)) |>
rename(state_name = NAME,
`2020` = POPESTIMATE2020,
`2021` = POPESTIMATE2021,
`2022` = POPESTIMATE2022,
`2023` = POPESTIMATE2023)
# creates graph to show if population for each state changes drastically overtime,
# since we see that pop barely changes for each state, can extrapolate
## that 2024 will just be average of pop from 2020-2023
population |>
pivot_longer(-(state_name),
names_to = 'year',
values_to = 'population') |>
mutate(year = parse_number(year)) |>
ggplot(aes(x = year, y = population, color = state_name)) +
geom_line() +
theme(legend.key.size = unit(0.25, 'cm'))
# loading in data
dat <- readRDS('data/dat.rds')
dat |>
select(date, population, cases, hosp,
covid_deaths, total_deaths, region,
region_name, state) |>
pivot_longer(c(cases, hosp,
covid_deaths, total_deaths), # create col of type of rate, for facet wrapping
names_to = 'type',
values_to = 'values') |>
mutate(rate = (values / population) * 100000) |> # calcs rate
ggplot(aes(x = date, y = rate, color = region_name)) +
geom_line(aes(group = state)) + # creates smooth lines
facet_wrap(~ type, nrow = 4, scales = 'free_y') + # stack/scale axis
labs(x = 'Time (Calendar Time)',
y = 'Rates (per 100000)',
title = 'Rates of COVID cases, Hospitalizations, COVID deaths, & Total Deaths in U.S.',
color = 'Region') +
theme(axis.text.x = element_text(vjust = 0.75, size = 6))
dat |>
select(date, population, cases, hosp,
covid_deaths, total_deaths, region,
region_name, state) |>
pivot_longer(c(cases, hosp,
covid_deaths, total_deaths), # create col of type of rate, for facet wrapping
names_to = 'type',
values_to = 'values') |>
filter(date >= make_date(2020, 3, 15) & date <= make_date(2020, 6, 1)) |> # filters for specific wave
mutate(rate = (values / population) * 100000) |> # calcs rate
ggplot(aes(x = date, y = rate, color = region_name)) +
geom_line(aes(group = state)) + # creates smooth lines
facet_wrap(~ type, nrow = 4, scales = 'free_y') + # stack/scale axis
labs(x = 'Time (Calendar Time)',
y = 'Rates (per 100000)',
title = 'Wave 1 (April - June 2020) Rates of COVID cases/deaths, Hospitalizations, & Total Deaths in U.S.',
color = 'Region') +
theme(axis.text.x = element_text(vjust = 0.75, size = 6))
dat |>
select(date, population, cases, hosp,
covid_deaths, total_deaths, region,
region_name, state) |>
pivot_longer(c(cases, hosp,
covid_deaths, total_deaths), # create col of type of rate, for facet wrapping
names_to = 'type',
values_to = 'values') |>
filter(date >= make_date(2020, 9, 1) & date <= make_date(2021, 4, 1)) |> # filters for specific wave
mutate(rate = (values / population) * 100000) |> # calcs rate
ggplot(aes(x = date, y = rate, color = region_name)) +
geom_line(aes(group = state)) + # creates smooth lines
facet_wrap(~ type, nrow = 4, scales = 'free_y') + # stack/scale axis
labs(x = 'Time (Calendar Time)',
y = 'Rates (per 100000)',
title = 'Wave 2 (October 2020 - March 2021) Rates of COVID cases/deaths, Hospitalizations, & Total Deaths in U.S.',
color = 'Region') +
theme(axis.text.x = element_text(vjust = 0.75, size = 6))
dat |>
select(date, population, cases, hosp,
covid_deaths, total_deaths, region,
region_name, state) |>
pivot_longer(c(cases, hosp,
covid_deaths, total_deaths), # create col of type of rate, for facet wrapping
names_to = 'type',
values_to = 'values') |>
filter(date >= make_date(2021, 7, 1) & date <= make_date(2021, 12, 31)) |> # filters for specific wave
mutate(rate = (values / population) * 100000) |> # calcs rate
ggplot(aes(x = date, y = rate, color = region_name)) +
geom_line(aes(group = state)) + # creates smooth lines
facet_wrap(~ type, nrow = 4, scales = 'free_y') + # stack/scale axis
labs(x = 'Time (Calendar Time)',
y = 'Rates (per 100000)',
title = 'Wave 3 (August - November 2021) Rates of COVID cases/deaths, Hospitalizations, & Total Deaths in U.S.',
color = 'Region') +
theme(axis.text.x = element_text(vjust = 0.75, size = 6))
dat |>
select(date, population, cases, hosp,
covid_deaths, total_deaths, region,
region_name, state) |>
pivot_longer(c(cases, hosp,
covid_deaths, total_deaths), # create col of type of rate, for facet wrapping
names_to = 'type',
values_to = 'values') |>
filter(date >= make_date(2021, 12, 1) & date <= make_date(2022, 3, 31)) |> # filters for specific wave
mutate(rate = (values / population) * 100000) |> # calcs rate
ggplot(aes(x = date, y = rate, color = region_name)) +
geom_line(aes(group = state)) + # creates smooth lines
facet_wrap(~ type, nrow = 4, scales = 'free_y') + # stack/scale axis
labs(x = 'Time (Calendar Time)',
y = 'Rates (per 100000)',
title = 'Wave 4 (January - March 2022) Rates of COVID cases/deaths, hospitalizations, & total deaths in U.S.',
color = 'Region') +
theme(axis.text.x = element_text(vjust = 0.75, size = 6))
dat |>
select(date, population, cases,
covid_deaths, total_deaths, region,
region_name, state) |>
filter(date >= make_date(2020, 3, 15) & date <= make_date(2020, 6, 1)) |>
mutate(cases_rate = (cases / population) * 100000) |>
ggplot(aes(x = date, y = cases_rate, color = state)) +
geom_line(aes(group = state)) + # creates smooth lines
facet_wrap( ~ region_name, scales = 'free_y') + # stack/scale axis
labs(x = 'Time (Calendar Time)',
y = 'Cases Rate (per 100000)',
title = 'Wave 1: COVID case rates in U.S. per state',
color = 'State') +
theme(axis.text.x = element_text(vjust = 0.75, size = 6, angle = 45),
legend.key.size = unit(0.25, 'cm'))
dat |>
select(date, population, cases,
covid_deaths, total_deaths, region,
region_name, state) |>
filter(date >= make_date(2020, 3, 15) & date <= make_date(2020, 6, 1)) |>
group_by(date, region_name) |>
reframe(date = date,
population = sum(population),
cases = sum(cases)) |>
distinct(.keep_all = TRUE) |>
mutate(cases_rate = (cases / population) * 100000) |>
ggplot(aes(x = date, y = cases_rate, color = region_name, group = region_name)) +
geom_line() + # creates smooth lines
labs(x = 'Time (Calendar Time)',
y = 'Rates (per 100000)',
title = 'Wave 1: Total COVID case rates in U.S. per region',
color = 'Region') +
theme(axis.text.x = element_text(vjust = 0.75, size = 6))
dat |>
select(date, population, cases,
covid_deaths, total_deaths, region,
region_name, state) |>
filter(date >= make_date(2020, 9, 1) & date <= make_date(2021, 4, 1)) |>
mutate(cases_rate = (cases / population) * 100000) |>
ggplot(aes(x = date, y = cases_rate, color = state)) +
geom_line(aes(group = state)) + # creates smooth lines
facet_wrap( ~ region_name, scales = 'free_y') + # stack/scale axis
labs(x = 'Time (Calendar Time)',
y = 'Cases Rate (per 100000)',
title = 'Wave 2: COVID case rates in U.S. per state',
color = 'State') +
theme(axis.text.x = element_text(vjust = 0.75, size = 6),
legend.key.size = unit(0.25, 'cm'))
dat |>
select(date, population, cases,
covid_deaths, total_deaths, region,
region_name, state) |>
filter(date >= make_date(2020, 9, 1) & date <= make_date(2021, 4, 1)) |>
group_by(date, region_name) |>
reframe(date = date,
population = sum(population),
cases = sum(cases)) |>
distinct(.keep_all = TRUE) |>
mutate(cases_rate = (cases / population) * 100000) |>
ggplot(aes(x = date, y = cases_rate, color = region_name, group = region_name)) +
geom_line() + # creates smooth lines
labs(x = 'Time (Calendar Time)',
y = 'Rates (per 100000)',
title = 'Wave 2: Total COVID case rates in U.S. per region',
color = 'Region') +
theme(axis.text.x = element_text(vjust = 0.75, size = 6))
dat |>
select(date, population, cases,
covid_deaths, total_deaths, region,
region_name, state) |>
filter(date >= make_date(2021, 7, 1) & date <= make_date(2021, 12, 31)) |>
mutate(cases_rate = (cases / population) * 100000) |>
ggplot(aes(x = date, y = cases_rate, color = state)) +
geom_line(aes(group = state)) + # creates smooth lines
facet_wrap( ~ region_name, scales = 'free_y') + # stack/scale axis
labs(x = 'Time (Calendar Time)',
y = 'Cases Rate (per 100000)',
title = 'Wave 3: COVID case rates in U.S. per state',
color = 'State') +
theme(axis.text.x = element_text(vjust = 0.75, size = 6, angle = 45),
legend.key.size = unit(0.25, 'cm'))
dat |>
select(date, population, cases,
covid_deaths, total_deaths, region,
region_name, state) |>
filter(date >= make_date(2021, 7, 1) & date <= make_date(2021, 12, 31)) |>
group_by(date, region_name) |>
reframe(date = date,
population = sum(population),
cases = sum(cases)) |>
distinct(.keep_all = TRUE) |>
mutate(cases_rate = (cases / population) * 100000) |>
ggplot(aes(x = date, y = cases_rate, color = region_name, group = region_name)) +
geom_line() + # creates smooth lines
labs(x = 'Time (Calendar Time)',
y = 'Rates (per 100000)',
title = 'Wave 3: Total COVID case rates in U.S. per region',
color = 'Region') +
theme(axis.text.x = element_text(vjust = 0.75, size = 6, angle = 45))
dat |>
select(date, population, cases,
covid_deaths, total_deaths, region,
region_name, state) |>
filter(date >= make_date(2021, 12, 1) & date <= make_date(2022, 3, 31)) |>
mutate(cases_rate = (cases / population) * 100000) |>
ggplot(aes(x = date, y = cases_rate, color = state)) +
geom_line(aes(group = state)) + # creates smooth lines
facet_wrap( ~ region_name, scales = 'free_y') + # stack/scale axis
labs(x = 'Time (Calendar Time)',
y = 'Cases Rate (per 100000)',
title = 'Wave 4: COVID case rates in U.S. per state',
color = 'State') +
theme(axis.text.x = element_text(vjust = 0.75, size = 6, angle = 45),
legend.key.size = unit(0.25, 'cm'))
dat |>
select(date, population, cases,
covid_deaths, total_deaths, region,
region_name, state) |>
filter(date >= make_date(2021, 12, 1) & date <= make_date(2022, 3, 31)) |>
group_by(date, region_name) |>
reframe(date = date,
population = sum(population),
cases = sum(cases)) |>
distinct(.keep_all = TRUE) |>
mutate(cases_rate = (cases / population) * 100000) |>
ggplot(aes(x = date, y = cases_rate, color = region_name, group = region_name)) +
geom_line() + # creates smooth lines
labs(x = 'Time (Calendar Time)',
y = 'Rates (per 100000)',
title = 'Wave 4: Total COVID case rates in U.S. per region',
color = 'Region') +
theme(axis.text.x = element_text(vjust = 0.75, size = 6))
